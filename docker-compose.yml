services:
  postgres:
    image: postgres:17-alpine
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    networks:
      - twilive-network
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  prisma:
    image: node:20-alpine
    container_name: prisma-deploy
    working_dir: /usr/src/app
    volumes:
      - ./prisma:/usr/src/app/prisma
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
    networks:
      - twilive-network
    command: [ "sh", "-c", "npx prisma migrate deploy" ]

  app:
    build: .
    container_name: twilive_bot
    env_file:
      - /etc/twilive-bot/.env
    depends_on:
      postgres:
        condition: service_healthy
      prisma:
        condition: service_completed_successfully
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHANNEL_ID: ${TELEGRAM_CHANNEL_ID}
      TWITCH_CLIENT_ID: ${TWITCH_CLIENT_ID}
      TWITCH_CLIENT_SECRET: ${TWITCH_CLIENT_SECRET}
      STREAMER_USERNAME: ${STREAMER_USERNAME}
      SEGMENT_DURATION: ${SEGMENT_DURATION}
      FPS: ${FPS}
      SCALE_WIDTH: ${SCALE_WIDTH}
    networks:
      - twilive-network
    ports:
      - "3042:3042"

networks:
  twilive-network:
    driver: bridge

volumes:
  pgdata: